"use strict";
"use client";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/AlertContext.tsx
var AlertContext_exports = {};
__export(AlertContext_exports, {
  AlertProvider: () => AlertProvider,
  useAlert: () => useAlert
});
module.exports = __toCommonJS(AlertContext_exports);
var import_react = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var AlertContext = (0, import_react.createContext)(void 0);
var AlertProvider = ({
  children
}) => {
  const [alerts, setAlerts] = (0, import_react.useState)([]);
  const addAlert = (title, message, type, passFunction) => {
    const newAlert = { id: Date.now(), message, type, title };
    setAlerts((prevAlerts) => [...prevAlerts, newAlert]);
  };
  const removeAlert = (id) => {
    setAlerts((prevAlerts) => prevAlerts.filter((alert) => alert.id !== id));
  };
  const clearAlerts = () => {
    setAlerts([]);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    AlertContext.Provider,
    {
      value: { alerts, addAlert, removeAlert, clearAlerts },
      children
    }
  );
};
var useAlert = () => {
  const context = (0, import_react.useContext)(AlertContext);
  if (!context) {
    throw new Error("useAlert must be used within an AlertProvider");
  }
  return context;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AlertProvider,
  useAlert
});
