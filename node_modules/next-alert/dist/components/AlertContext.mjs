"use client";

// src/components/AlertContext.tsx
import { createContext, useContext, useState } from "react";
import { jsx } from "react/jsx-runtime";
var AlertContext = createContext(void 0);
var AlertProvider = ({
  children
}) => {
  const [alerts, setAlerts] = useState([]);
  const addAlert = (title, message, type, passFunction) => {
    const newAlert = { id: Date.now(), message, type, title };
    setAlerts((prevAlerts) => [...prevAlerts, newAlert]);
  };
  const removeAlert = (id) => {
    setAlerts((prevAlerts) => prevAlerts.filter((alert) => alert.id !== id));
  };
  const clearAlerts = () => {
    setAlerts([]);
  };
  return /* @__PURE__ */ jsx(
    AlertContext.Provider,
    {
      value: { alerts, addAlert, removeAlert, clearAlerts },
      children
    }
  );
};
var useAlert = () => {
  const context = useContext(AlertContext);
  if (!context) {
    throw new Error("useAlert must be used within an AlertProvider");
  }
  return context;
};
export {
  AlertProvider,
  useAlert
};
