import React, { ReactNode } from 'react';

/**
 * Represents an alert in the application.
 */
interface Alert {
    id: number;
    title: string;
    message: string;
    type: "success" | "error" | "warning" | "info";
    passFunction?: () => void;
}
/**
 * Represents the properties of the AlertContext.
 */
interface AlertContextProps {
    alerts: Alert[];
    /**
     * Adds a new alert to the context.
     *
     * @param {string} title - The title of the alert.
     * @param {string} message - The message of the alert.
     * @param {"success" | "error" | "warning" | "info"} type - The type of the alert.
     * Can be one of: "success", "error", "warning", "info".
     */
    addAlert: (
    /**
     * The title of the alert.
     */
    title: string, 
    /**
     * The message of the alert.
     */
    message: string, 
    /**
     * The type of the alert.
     * Can be one of: "success", "error", "warning", "info".
     */
    type: "success" | "error" | "warning" | "info", 
    /**
     * The function to pass to the alert.
     */
    passFunction?: () => void) => void;
    /**
     * Removes an alert from the context.
     * @param id - The ID of the alert to remove.
     */
    removeAlert: (id: number) => void;
    /**
     * Clears all alerts from the context.
     */
    clearAlerts: () => void;
}
/**
 * Provider component for the AlertContext.
 */
declare const AlertProvider: React.FC<{
    children: ReactNode;
}>;
/**
 * Custom hook for accessing the AlertContext.
 * @returns The AlertContext.
 * @throws An error if used outside of the AlertProvider.
 */
declare const useAlert: () => AlertContextProps;

export { AlertProvider, useAlert };
